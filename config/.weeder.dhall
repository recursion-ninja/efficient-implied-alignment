{ roots =
    [ "^Alignment.postorderLogic$"
    , "^Alignment.preorderInternalLogic$"
    , "^Alignment.preorderLeafLogic$"
    , "^Alignment.preorderRootLogic$"
    , "^Alignment.Pairwise.alignNaively$"
    , "^Alignment.Pairwise.alignNeedlemanWunsch$"
    , "^Alignment.Pairwise.alignUkkonen$"
    , "^Alignment.Pairwise.Test.testSuite$"
    , "^Data.Alphabet.Alphabet$"
    , "^Data.Alphabet.AmbiguityGroup$"
    , "^Data.Alphabet.fromSymbols$"
    , "^Data.Alphabet.alphabetSymbols$"
    , "^Data.Alphabet.gapSymbol$"
    , "^Data.Alphabet.IUPAC.decodeIUPAC$"
    , "^Data.Alphabet.IUPAC.encodeIUPAC$"
    , "^Data.Alphabet.IUPAC.isAlphabetAminoAcid$"
    , "^Data.Alphabet.IUPAC.isAlphabetDna$"
    , "^Data.Alphabet.IUPAC.isAlphabetRna$"
    , "^Data.Alphabet.IUPAC.iupacToAminoAcid$"
    , "^Data.Alphabet.IUPAC.iupacToDna$"
    , "^Data.Alphabet.IUPAC.iupacToRna$"
    , "^Data.BTree.BTree$"
    , "^Data.BTree.NodeDatum$"
    , "^Data.BTree.toBinaryRenderingTree$"
    , "^Data.BTree.getNodeDatum$"
    , "^Data.BTree.setLeafLabels$"
    , "^Data.BTree.subtreeSize$"
    , "^Data.BTree.horizontalRendering$"
    , "^Data.BTree.renderAlignment$"
    , "^Data.BTree.renderPhylogeny$"
    , "^Data.BTree.treeZipWith$"
    , "^Data.BTree.postorder$"
    , "^Data.BTree.preorder$"
    , "^Data.DecTree.postorderTraverse$"
    , "^Data.DecTree.preorderTraverse$"
    , "^Data.List.Utility.duplicates$"
    , "^Data.List.Utility.mostCommon$"
    , "^Data.SymbolString.decodeAmbiguityGroup$"
    , "^Data.SymbolString.encodeAmbiguityGroup$"
    , "^Data.SymbolString.filterGaps$"
    , "^Data.SymbolString.renderAligns$"
    , "^Data.SymbolString.renderLikeDNA$"
    , "^Data.SymbolString.renderMonospacedGroup$"
    , "^Data.SymbolString.renderSingleton$"
    , "^Data.SymbolString.renderSmartly$"
    , "^Data.SymbolString.renderString$"
    , "^Data.SymbolString.renderSymbolString$"
    , "^Data.SymbolString.reverseContext$"
    , "^Data.SymbolString.symbolAlignmentLeft$"
    , "^Data.SymbolString.symbolAlignmentMedian$"
    , "^Data.SymbolString.symbolAlignmentRight$"
    , "^Data.SymbolString.(/\\\\)$"
    , "^Data.SymbolString.alignElement$"
    , "^Data.SymbolString.deleteElement$"
    , "^Data.SymbolString.gappingElement$"
    , "^Data.SymbolString.insertElement$"
    , "^Data.SymbolString.isAlign$"
    , "^Data.SymbolString.isDelete$"
    , "^Data.SymbolString.isGapping$"
    , "^Data.SymbolString.isInsert$"
    , "^Data.TCM.overlap'$"
    , "^Data.TCM.renderTCM$"
    , "^File.Input.parseFileInput$"
    , "^File.Input.unifyInput$"
    , "^File.Output.writeFastaFile$"
    , "^InputParser.parseTimingParameters$"
    , "^InputParser.parseUserInput$"
    , "^Main.drawFigure$"
    , "^Main.main$"
    , "^Main.modify(FASTA|Newick)$"
    , "^Main.recordRuntime$"
    , "^Main.runSpecifiedInput$"
    , "^Main.test(Print|Suite|Trees)$"
    , "^Paths_.*"
    , "^SampleData.defaultAlphabet$"
    , "^SampleData.sampleDataSets$"
    , "^System.Timing.fromMicroseconds$"
    , "^System.Timing.fromMilliseconds$"
    , "^System.Timing.fromPicoseconds$"
    , "^System.Timing.timeOp$"
    , "^System.Timing.toMicroseconds$"
    , "^System.Timing.toMilliseconds$"
    , "^System.Timing.toPicoseconds$"
    , "^TimingParameters.validateTimingParameters$"
    ]
, type-class-roots = True
}
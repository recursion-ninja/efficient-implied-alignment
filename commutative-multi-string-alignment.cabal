cabal-version:  >= 1.10
category:       Algorithms
build-type:     Simple

name:           commutative-multi-string-alignment
version:        0.1.0

author:         Alex Washburn
maintainer:     github@recursion.ninja
copyright:      2018 Alex Washburn
license:        BSD3
license-file:   LICENSE

synopsis:       Proof of concept of efficient multiple string alignment

description:    Using a commutative, binary string alignment operator and a
                binary tree with strings on the leaf nodes, we can efficiently
                derive the a multiple string alignment of the implied by the
                binary tree. Requires a pot-order then preorder traversal.
                Post-order traversal should be worst case /O(n*k^2)/, average
                case /O(n*k*log(k))/ and the pre-order traversal should be
                /O(n*k)/.

homepage:       https://github.com/githubuser/commutative-multi-string-alignment#readme
bug-reports:    https://github.com/githubuser/commutative-multi-string-alignment/issues
                
extra-source-files:
    ChangeLog.md
    README.md

source-repository head
  type: git
  location: https://github.com/githubuser/commutative-multi-string-alignment


library

  hs-source-dirs:
      src

  build-depends:
      base >=4.7 && <5
    , bimap
    , bv-little
    , case-insensitive
    -- >=0.5.8 Required for Data.Map.restrictKeys
    , containers       >=0.5.8
    , deepseq
    , dlist
    , hashable
    , integer-gmp
    , keys
    , lens
    , matrix
    , megaparsec       >=6.3
    , mono-traversable >=1.0
    , mtl
    , pointed
    , QuickCheck
    , scientific
    , semigroupoids
    , semigroups
    , text
    , transformers
    , unordered-containers
    , vector
    -- >=3.4 required for corrected definition of (!) & index
    , vector-instances >=3.4

  exposed-modules:
      Alignment
      Alignment.Pairwise
      Data.Alphabet
      Data.Alphabet.IUPAC
      Data.BTree            
      Data.Decoration
      Data.Matrix.ZeroIndexed
      Data.SymbolString
      Data.TCM
      File.Format.Fastc
      File.Format.Newick
      File.Format.TransitionCostMatrix

  other-modules:
      Alignment.Internal
      Alignment.Pairwise.Internal
      Alignment.Pairwise.NeedlemanWunsch
      Alignment.Pairwise.Ukkonen
      Alignment.Pairwise.Ukkonen.Internal
      Alignment.Pairwise.Ukkonen.Ribbon
      Data.Alphabet.Internal
      Data.Decoration.Class
      Data.Decoration.Internal
      Data.Decoration.Leaf
      Data.List.Utility
      Data.Vector.NonEmpty
      File.Format.Fastc.Internal
      File.Format.Fastc.Parser
      File.Format.Newick.Internal
      File.Format.Newick.Parser
      File.Format.TransitionCostMatrix.Parser
      Numeric.Extended
      Numeric.Extended.Internal
      Numeric.Extended.Natural
      Numeric.Extended.Real
      Text.Megaparsec.Custom

  default-language: Haskell2010

  
executable tree-align

  main-is: Main.hs

  hs-source-dirs:
      app

  ghc-options: -threaded -rtsopts -with-rtsopts=-N

  build-depends:
      ansi-wl-pprint
    , base       >=4.7 && <5
    , commutative-multi-string-alignment
    , containers >=0.5.8
    , keys
    , optparse-applicative
    , pointed
    , semigroupoids
    , validation

  other-modules:
      Paths_commutative_multi_string_alignment

  default-language: Haskell2010

  
test-suite test-align

  type: exitcode-stdio-1.0

  main-is: Spec.hs

  hs-source-dirs:
      test

  ghc-options: -threaded -rtsopts -with-rtsopts=-N

  build-depends:
      base >=4.7 && <5
    , commutative-multi-string-alignment

  other-modules:
      Paths_commutative_multi_string_alignment

  default-language: Haskell2010
